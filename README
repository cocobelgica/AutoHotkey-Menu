MENU Class Reference

I. Objects/Interfaces
MENU [Class Object] - Represents the class
MENU [Instance]     - Represents a menu
MENU._menuitems_    - Represents the menu items in the menu
MENU._item_         - Represents a single menu item. MENU._item_ is the base
                      interface for accessing a menu item's properties and methods.
MENU._trayicon_     - Represents the Tray menu icon.

II. Properties
================================================================================
name                - Returns the name of the menu or the menu item.
                      If the target object is a menu item object, setting this
                      property renames the menu item.
                      ** Applies to MENU (Read-only) , MENU._item_ (Read/write)
Example(s):
MenuName := menuObj.name          ; retrieve the menu's name
ItemName := itemObj.name          ; retireve the menu item's name
itemObj.name := "New item name"   ; renames the menu item
================================================================================
handle              - Returns the handle/hMenu of the menu.
                      ** Applies to MENU (Read-only)
Example(s):
hMenu := menuObj.handle           ; retrieve the menu's handle
================================================================================
count               - Returns the number of items in the menu.
                      ** Applies to MENU (Read-only)
Example(s):
ItemCount := menuObj.count        ; retireve the number of items in the menu
================================================================================
default             - If the target object is a MENU object, this property
                      contains the MENU._item_ object representing the
                      default(if any) menu item. Assign a menu item object or
                      the menu item's name to this property to make that menu
                      item the default menu item.
                      If the target object is a MENU._item_ object, this
                      property returns True(1) if the item is currently the
                      default item, otherwise, it returns False(0). Set this
                      property to True(1) to make the target menu item object the
                      default menu item, otherwise, set it to False(0).
                      ** Applies to MENU (Read/write) , MENU._item_ (Read/write)
Example(s):
defaultItem := menuObj.default   ; Returns the default menu item (Object)
isDefault := itemObj.default     ; Contains 1 if the item is the default item
menuObj.default := itemObj       ; Sets "itemObj" as the default menu item
itemObj.default := 1             ; Same as above
================================================================================
target              - Gets or sets the menu item's target label or function or submenu.
                      Valid values:
                      LabelName     - String specifying the target label's name
                      FunctionName  - String specifying the target function's name
                      FuncObject    - A refernce to a Func object.
                      SubmenuName   - String specifying the name of the menu to be
                                      attached as submenu. Precede it with a ":"
                      SubmenuObj    - a MENU object derived from this class that
                                      represents a menu to be attached as a submenu                 
                      If the assigned value exists as both a Label and a Function
                      in the script, the target Label will be called every time
                      the item is selected. To have it call the function instead,
                      assign a FuncObject. To have an item open a submenu,
                      specify the menu's name preceded by a ":" or assign a
                      MENU object. 
                      ** Applies to MENU._item_ (Read/write)
Example(s):
itemObj.target := "LabelName"         ; Sets LabelName as the item's event handler
itemObj.target := "FunctionName"      ; Sets FunctionName in this case
itemObj.target := Func("MyFunction")  ; Value is a FuncObject
itemObj.target := ":AnotherMenu"      ; Item opens a submenu
itemObj.target := SubmenuObj          ; Submenu, assigned value is another MENU object
================================================================================
icon                - If the target object is a MENU._item_ object, this property
                      sets the menu item's icon (file) and/or icon number(if any).
                      Specify a string containing the path to the icon file or
                      resource. To specify the icon number, separate it with a
                      comma(there must be no spaces in between, see example).
                      For the tray icon, target object must be a MENU object
                      whose name property is "Tray". If the target object is a
                      MENU (Tray) object, this property returns a MENU._trayicon_
                      object with the following fields: "file", "number", "tip", and "click".
                      -see property description for the specified fields-
                      ** Applies to MENU(tray; Read/write) , MENU._item_ (Read/write)
Example(s):
Menu item object
itemObj.icon := "Shell32.dll,15"     ; Note comma in between

Menu(tray) object
; You can omit unneeded fields
trayObj.icon := {file: "Shell32", number: 15, tip: "Tray tip", click: 2}
; You can also assign a comma delimited string in this order: [file, number, click, tip]
trayObj.icon := "Shell32.dll,15,2,Tray tip"
; leave blank to omit a field. Here "click" is not specified
trayObj.icon := "Shell32.dll,15,,Tray tip"
================================================================================
file                - Sets or gets the tray menu icon's file. Specify a string
                      containing the path to the icon file or resource. Target
                      object must be a MENU object whose name property is "Tray".
                      Default value returns A_AhkPath.
                      ** Applies to MENU._trayicon_ (Read/write)
Example(s):
trayObj.icon.file := "Shell32.dll"
================================================================================
number              - Sets or gets the tray menu icon number. Default is 1
                      ** Applies to MENU._trayicon_ (Read/write)
Example(s):
trayObj.icon.number := 15
================================================================================
tip                 - Sets or gets the tray menu icon's tooltip.
                      Default value is A_ScriptName.
                      ** Applies to MENU._trayicon_ (Read/write)
Example(s):
trayObj.icon.tip := "This is a tray tip."
================================================================================
click               - Specify 1 to allow a single-click to activate the tray
                      menu's default menu item. Specify 2 to return to the
                      default behavior (double-click). 
                      ** Applies to MENU._trayicon_ (Read/write)
Example(s):
trayObj.icon.click := 1
================================================================================
check               - Gets or sets the menu item's check state. Specify 1 to
                      put a checkmark, 0 to uncheck and 2 to toggle. This property
                      returns True(1) if the item is checked, otherwise, False(0)
                      if there is no checkmark.
                      ** Applies to MENU._item_ (Read/write)
Example(s):
itemObj.check := 1  ; 1=check , 0=uncheck , 2=togglecheck
================================================================================
enable              - Enables or disables(grays out) a menu item. Specify 1 to
                      enable, 0 to disable and 2 to toggle. This property
                      returns True(1) if the item is enabled, otherwise, False(0)
                      if the item is disabled.
                      ** Applies to MENU._item_ (Read/write)
Example(s):
itemObj.enable := 1  ; 1=enable , 0=disable , 2=toggleenable
================================================================================
pos                 - Returns the menu item's one-based position in the menu.
                      Setting this property moves the menu item at the specified
                      position. Value must not be less than 1 and not be greater
                      than the total menu item count.
                      ** Applies to MENU._item_ (Read/write)
Example(s):
ItemPos := itemObj.pos   ; Retrieves the menu item's position
itemObj.pos := 3         ; Moves the item to the 3rd position in the menu
================================================================================
type                - Returns the menu item's type.
                      Return values(string):
                      Normal     - Normal menu item
                      Separator  - Menu item is a separator
                      Submenu    - Menu item opens a submenu
                      Standard   - Item is part of the AHK standard menu items
                      ** Applies to MENU._item_ (Read-only)
Example(s):
ItemType := itemObj.type
================================================================================
id                  - Returns the menu item identifier of the menu item.
                      This property returns 0 for menu items of the type "Separator",
                      -1 for items that open a submenu.
                      ** Applies to MENU._item_ (Read-only)
Example(s):
ItemID := itemObj.id
================================================================================
color               - Sets the menu's background color. Specify a string indicating
                      the ColorValue which is one of the 16 primary HTML color
                      names or a 6-digit RGB color value. Delimit with a comma and
                      specify either "1", "true" or "Single" to have any submenus
                      attached to this menu retain their default color. Otherwise,
                      specify either "0" or "false" or omit to change the color
                      of any attached submenus as well. You can also assign an
                      object. When specifying an object, object can be an associative
                      array with the following fields:
                      value   - the color value
                      single  - indicates whether attached submenus should
                                retain or change their background color.
                      Alternatively, you can assign a simple array. First field
                      must be the color value and second field must be the value of the
                      "single" property/attribute. -SEE EXAMPLES FOR DETAILS-
                      This property returns an object with the ff fields:
                      value   - contains the color value.
                                Blank if not previously altered.
                      single  - contains either "single","1","true" or "0","false"
                      ** Applies to MENU (Read/write)
Example(s):
; Here we assign a string
; instead of the word "single", you can also specify "1" or "true" or "0" or "false"
menuObj.color := "White,single" ; Attached submenus retain their background colors.
menuObj.color := "White,false"  ; Attached submenus change their background colors as well.
menuObj.color := "White"        ; Same as above, "single" is omitted. Defaults to True(1)

; Here we assign an object. There are two ways to do this.
; The value of "single" can be either of the ff: "1" or "true" or "single" or "0" or "false"
menuObj.color := {value: "White", single: 1} ; associative array
menuObj.color := ["White", 1]                ; simple array

; Retrieve the menu's background color.
BackColor := menuObj.color.value
================================================================================
standard            - Specify True(1) to insert the standard menu items at the
                      bottom of the menu (if they are not already present).
                      Setting the value to False(0), removes all standard (non-custom)
                      menu items from the menu (if they are present).
                      Returns the one-based index or position of the first standard
                      menu item if set to True(1), otherwise, returns False(0).
                      ** Applies to MENU
Example(s):
; Returns the first standard menu item's index if the menu contains the standard items.
IsStandard := menuObj.standard
; Inserts the standard menu items at the bottom of the menu
menuObj.standard := true
================================================================================
menu                - Represents the menu from which the menu item belongs to.
                      Returns a MENU object.
                      ** Applies to MENU._item_ (Read-only)
Example(s):
menuObj := itemObj.menu
================================================================================
isMenu              - Returns True(1) if the menu exists, otherwise, False(0).
                      This property is not for general use.
                      ** Applies to MENU (Read-only)
Example(s):
IsMenu := menuObj.isMenu
================================================================================
item                - Represents a MENU._menuitems_ object containg a list of
                      all menu items for this menu. This is the base interface to
                      access/retrieve each menu item object. You can access a
                      menu item object via its pos/index or name property.
                      ** Applies to MENU (Read-only)
Example(s):
; Retrieve the first menu item in the menu. Returns a menu item object.
; Here we specify its index
itemObj := menuObj.item[1] ; or menuObj.item.1
; You can then access the menu item's properties via the returned object
ItemName := itemObj.name
itemObj.name := "New menu item name" ; rename the item

; Retrieve/access a menu item object by name
itemObj := menuObj.item["First menu item"]

; Here are some examples on how to access a menu item object's property
ItemName := menuObj.item[1].name    ; Retrieve the name of the first menu item
menuObj.item[1].pos := 3            ; Moves the first menu item to the 3rd position

; Here we remove/delete the item from the menu by assigning a blank value
menuObj.item[1] := ""               ; Deletes the first menu item from the menu
menuObj.item["Open`tCtrl+O"] := ""  ; Deletes the menu item with the specified name
================================================================================
thisItem            - Represents the most recently selected menu item.
                      Target object must be the Class object itself which is
                      the super-global varaible "Menu"(ClassName). This property
                      is similar to the built-in variable A_ThisMenuItem. But
                      instead of containing the menu item's name, this property
                      contains a menu item object. This property is useful when
                      you have a common label or function that handles all menu
                      events. The menu item object representing the most recently
                      selected item is accessible even within local scope.
                      ** Applies to MENU[Class object]
Example(s):
; Here we have a common label assigned to handle all events for a specific menu.
MyMenuHandler: ; Label is triggered every time a menu item is selected
itemObj := menu.thisItem
if (itemObj.pos = 1)
	MsgBox, % itemObj.name
return

; Here we have a function assigned to handle events.
; Since the target object is the Class object itself, the menu item object is
; accessible even witihin local scope
MyMenuHandler() { ; Function gets called every time a menu item is selected
	itemObj := menu.thisItem
	if (itemObj.pos = 1)
		MsgBox, % itemObj.name
}
================================================================================
thisMenu            - Represents the menu from which the most recently selected
                      menu item belongs to. This is similar to the built-in
                      varaible A_ThisMenu. It contains a MENU object. Just like
                      the 'thisMenu' property, target object must be the Class
                      object itself.
                      ** Applies to MENU[Class object]
Example(s):
; Here we have common label assigned to handle all events for all created menus
CommonMenuHandler:
menuObj := menu.thisMenu ; retrieve the MENU object
itemObj := menu.thisItem ; retrieve the menu item object
if (menuObj.name == "MyMenu") {
	if (itemObj.pos == 1)
		; some code if it's the first item
	else if (itemObj.pos == 2)
		; some code if it's the second item
} else if (menuObj.name == "AnotherMenu") {
	; some code for "AnotherMenu"
}
return
================================================================================